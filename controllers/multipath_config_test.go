package controllers

import (
	"strings"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	multipathv1 "github.com/multipath-operator/api/v1"
)

func getCompleteMultipathConfig() multipathv1.MultipathConfig {
	return multipathv1.MultipathConfig{
		Defaults: multipathv1.DefaultsConfig{
			UserFriendlyNames:  "yes",
			FindMultipaths:     "yes",
			PathGroupingPolicy: "failover",
			PathSelector:       "round-robin 0",
			PathChecker:        "tur",
			Failback:           "immediate",
			RRWeight:           "priorities",
			NoPathRetry:        "queue",
		},
		Blacklist: []multipathv1.BlacklistEntry{
			{
				Devnode: "^(ram|raw|loop|fd|md|dm-|sr|scd|st|dcssblk)[0-9]",
			},
		},
		BlacklistExceptions: []multipathv1.BlacklistException{
			{
				Device: multipathv1.DeviceIdentifier{
					Vendor:  "NetApp",
					Product: "LUN.*",
				},
			},
		},
		Devices: []multipathv1.DeviceEntry{
			{
				Vendor:             "NetApp",
				Product:            "LUN",
				PathGroupingPolicy: "group_by_prio",
				PathSelector:       "round-robin 0",
				PathChecker:        "tur",
				Features:           "1 queue_if_no_path",
				HardwareHandler:    "1 alua",
			},
		},
		Multipaths: []multipathv1.MultipathEntry{
			{
				WWID:               "36001405abcdef1234567890",
				Alias:              "test-multipath-device",
				PathGroupingPolicy: "failover",
				PathSelector:       "round-robin 0",
				Failback:           "immediate",
			},
		},
	}
}

var _ = Describe("Multipath Configuration Generation", func() {

	var reconciler *MultipathReconciler

	BeforeEach(func() {
		reconciler = &MultipathReconciler{}
	})

	Describe("generateMultipathConfig", func() {
		Context("when generating basic configuration", func() {
			It("should generate configuration with defaults section", func() {
				multipath := &multipathv1.Multipath{
					Spec: multipathv1.MultipathSpec{
						Config: multipathv1.MultipathConfig{
							Defaults: multipathv1.DefaultsConfig{
								UserFriendlyNames:  "yes",
								FindMultipaths:     "yes",
								PathGroupingPolicy: "failover",
								PathSelector:       "round-robin 0",
								PathChecker:        "tur",
								Failback:           "immediate",
								RRWeight:           "priorities",
								NoPathRetry:        "queue",
							},
						},
					},
				}

				config := reconciler.generateMultipathConfig(multipath)

				Expect(config).To(ContainSubstring("# Multipath configuration generated by multipath-operator"))
				Expect(config).To(ContainSubstring("defaults {"))
				Expect(config).To(ContainSubstring("user_friendly_names yes"))
				Expect(config).To(ContainSubstring("find_multipaths yes"))
				Expect(config).To(ContainSubstring("path_grouping_policy failover"))
				Expect(config).To(ContainSubstring("path_selector \"round-robin 0\""))
				Expect(config).To(ContainSubstring("path_checker tur"))
				Expect(config).To(ContainSubstring("failback immediate"))
				Expect(config).To(ContainSubstring("rr_weight priorities"))
				Expect(config).To(ContainSubstring("no_path_retry queue"))
				Expect(config).To(ContainSubstring("}"))
			})

			It("should generate configuration with empty defaults when not specified", func() {
				multipath := &multipathv1.Multipath{
					Spec: multipathv1.MultipathSpec{
						Config: multipathv1.MultipathConfig{},
					},
				}

				config := reconciler.generateMultipathConfig(multipath)

				Expect(config).To(ContainSubstring("# Multipath configuration generated by multipath-operator"))
				Expect(config).NotTo(ContainSubstring("defaults {"))
			})

			It("should generate configuration with partial defaults", func() {
				multipath := &multipathv1.Multipath{
					Spec: multipathv1.MultipathSpec{
						Config: multipathv1.MultipathConfig{
							Defaults: multipathv1.DefaultsConfig{
								UserFriendlyNames: "yes",
								PathChecker:       "tur",
							},
						},
					},
				}

				config := reconciler.generateMultipathConfig(multipath)

				Expect(config).To(ContainSubstring("defaults {"))
				Expect(config).To(ContainSubstring("user_friendly_names yes"))
				Expect(config).To(ContainSubstring("path_checker tur"))
				Expect(config).NotTo(ContainSubstring("find_multipaths"))
				Expect(config).NotTo(ContainSubstring("path_grouping_policy"))
			})
		})

		Context("when generating blacklist configuration", func() {
			It("should generate blacklist entries", func() {
				multipath := &multipathv1.Multipath{
					Spec: multipathv1.MultipathSpec{
						Config: multipathv1.MultipathConfig{
							Blacklist: []multipathv1.BlacklistEntry{
								{
									Devnode: "^(ram|raw|loop|fd|md|dm-|sr|scd|st|dcssblk)[0-9]",
								},
								{
									WWID: "36001405abcdef1234567890",
								},
								{
									Device: multipathv1.DeviceIdentifier{
										Vendor:  "VENDOR1",
										Product: "PRODUCT1",
									},
								},
							},
						},
					},
				}

				config := reconciler.generateMultipathConfig(multipath)

				Expect(config).To(ContainSubstring("blacklist {"))
				Expect(config).To(ContainSubstring("devnode ^(ram|raw|loop|fd|md|dm-|sr|scd|st|dcssblk)[0-9]"))
				Expect(config).To(ContainSubstring("wwid 36001405abcdef1234567890"))
				Expect(config).To(ContainSubstring("device {"))
				Expect(config).To(ContainSubstring("vendor VENDOR1"))
				Expect(config).To(ContainSubstring("product PRODUCT1"))
			})

			It("should generate blacklist exception entries", func() {
				multipath := &multipathv1.Multipath{
					Spec: multipathv1.MultipathSpec{
						Config: multipathv1.MultipathConfig{
							BlacklistExceptions: []multipathv1.BlacklistException{
								{
									Devnode: "/dev/sda",
								},
								{
									WWID: "36001405abcdef1234567890",
								},
								{
									Device: multipathv1.DeviceIdentifier{
										Vendor:  "NetApp",
										Product: "LUN.*",
									},
								},
							},
						},
					},
				}

				config := reconciler.generateMultipathConfig(multipath)

				Expect(config).To(ContainSubstring("blacklist_exceptions {"))
				Expect(config).To(ContainSubstring("devnode /dev/sda"))
				Expect(config).To(ContainSubstring("wwid 36001405abcdef1234567890"))
				Expect(config).To(ContainSubstring("device {"))
				Expect(config).To(ContainSubstring("vendor NetApp"))
				Expect(config).To(ContainSubstring("product LUN.*"))
			})
		})

		Context("when generating devices configuration", func() {
			It("should generate device entries with all fields", func() {
				multipath := &multipathv1.Multipath{
					Spec: multipathv1.MultipathSpec{
						Config: multipathv1.MultipathConfig{
							Devices: []multipathv1.DeviceEntry{
								{
									Vendor:             "NetApp",
									Product:            "LUN",
									PathGroupingPolicy: "group_by_prio",
									PathSelector:       "round-robin 0",
									PathChecker:        "tur",
									Features:           "1 queue_if_no_path",
									HardwareHandler:    "1 alua",
								},
								{
									Vendor:          "EMC",
									Product:         "SYMMETRIX",
									PathChecker:     "emc_clariion",
									Features:        "0",
									HardwareHandler: "1 emc",
								},
							},
						},
					},
				}

				config := reconciler.generateMultipathConfig(multipath)

				Expect(config).To(ContainSubstring("devices {"))
				Expect(config).To(ContainSubstring("device {"))
				Expect(config).To(ContainSubstring("vendor NetApp"))
				Expect(config).To(ContainSubstring("product LUN"))
				Expect(config).To(ContainSubstring("path_grouping_policy group_by_prio"))
				Expect(config).To(ContainSubstring("path_selector \"round-robin 0\""))
				Expect(config).To(ContainSubstring("path_checker tur"))
				Expect(config).To(ContainSubstring("features queue_if_no_path"))
				Expect(config).To(ContainSubstring("hardware_handler alua"))

				Expect(config).To(ContainSubstring("vendor EMC"))
				Expect(config).To(ContainSubstring("product SYMMETRIX"))
				Expect(config).To(ContainSubstring("path_checker emc_clariion"))
				Expect(config).To(ContainSubstring("features 0"))
				Expect(config).To(ContainSubstring("hardware_handler emc"))
			})

			It("should generate device entries with minimum required fields", func() {
				multipath := &multipathv1.Multipath{
					Spec: multipathv1.MultipathSpec{
						Config: multipathv1.MultipathConfig{
							Devices: []multipathv1.DeviceEntry{
								{
									Vendor:  "TestVendor",
									Product: "TestProduct",
								},
							},
						},
					},
				}

				config := reconciler.generateMultipathConfig(multipath)

				Expect(config).To(ContainSubstring("devices {"))
				Expect(config).To(ContainSubstring("device {"))
				Expect(config).To(ContainSubstring("vendor TestVendor"))
				Expect(config).To(ContainSubstring("product TestProduct"))
				Expect(config).NotTo(ContainSubstring("path_grouping_policy"))
				Expect(config).NotTo(ContainSubstring("path_selector"))
				Expect(config).NotTo(ContainSubstring("path_checker"))
				Expect(config).NotTo(ContainSubstring("features"))
				Expect(config).NotTo(ContainSubstring("hardware_handler"))
			})
		})

		Context("when generating multipaths configuration", func() {
			It("should generate multipath device entries", func() {
				multipath := &multipathv1.Multipath{
					Spec: multipathv1.MultipathSpec{
						Config: multipathv1.MultipathConfig{
							Multipaths: []multipathv1.MultipathEntry{
								{
									WWID:               "36001405abcdef1234567890",
									Alias:              "test-multipath-device",
									PathGroupingPolicy: "failover",
									PathSelector:       "round-robin 0",
									Failback:           "immediate",
								},
								{
									WWID:  "36001405fedcba0987654321",
									Alias: "another-multipath-device",
								},
							},
						},
					},
				}

				config := reconciler.generateMultipathConfig(multipath)

				Expect(config).To(ContainSubstring("multipaths {"))
				Expect(config).To(ContainSubstring("multipath {"))
				Expect(config).To(ContainSubstring("wwid 36001405abcdef1234567890"))
				Expect(config).To(ContainSubstring("alias test-multipath-device"))
				Expect(config).To(ContainSubstring("path_grouping_policy failover"))
				Expect(config).To(ContainSubstring("path_selector \"round-robin 0\""))
				Expect(config).To(ContainSubstring("failback immediate"))

				Expect(config).To(ContainSubstring("wwid 36001405fedcba0987654321"))
				Expect(config).To(ContainSubstring("alias another-multipath-device"))
			})

			It("should generate multipath device entry with minimum required fields", func() {
				multipath := &multipathv1.Multipath{
					Spec: multipathv1.MultipathSpec{
						Config: multipathv1.MultipathConfig{
							Multipaths: []multipathv1.MultipathEntry{
								{
									WWID: "36001405abcdef1234567890",
								},
							},
						},
					},
				}

				config := reconciler.generateMultipathConfig(multipath)

				Expect(config).To(ContainSubstring("multipaths {"))
				Expect(config).To(ContainSubstring("multipath {"))
				Expect(config).To(ContainSubstring("wwid 36001405abcdef1234567890"))
				Expect(config).NotTo(ContainSubstring("alias"))
				Expect(config).NotTo(ContainSubstring("path_grouping_policy"))
				Expect(config).NotTo(ContainSubstring("path_selector"))
				Expect(config).NotTo(ContainSubstring("failback"))
			})
		})

		Context("when generating complete configuration", func() {
			It("should generate a complete multipath configuration", func() {
				multipath := &multipathv1.Multipath{
					Spec: multipathv1.MultipathSpec{
						Config: getCompleteMultipathConfig(),
					},
				}

				config := reconciler.generateMultipathConfig(multipath)

				// Check that all sections are present
				Expect(config).To(ContainSubstring("# Multipath configuration generated by multipath-operator"))
				Expect(config).To(ContainSubstring("defaults {"))
				Expect(config).To(ContainSubstring("blacklist {"))
				Expect(config).To(ContainSubstring("blacklist_exceptions {"))
				Expect(config).To(ContainSubstring("devices {"))
				Expect(config).To(ContainSubstring("multipaths {"))

				// Check order (defaults should come first)
				defaultsIndex := strings.Index(config, "defaults {")
				blacklistIndex := strings.Index(config, "blacklist {")
				devicesIndex := strings.Index(config, "devices {")
				multipathsIndex := strings.Index(config, "multipaths {")

				Expect(defaultsIndex).To(BeNumerically("<", blacklistIndex))
				Expect(blacklistIndex).To(BeNumerically("<", devicesIndex))
				Expect(devicesIndex).To(BeNumerically("<", multipathsIndex))
			})
		})
	})

	Describe("generateBlacklistConfig", func() {
		Context("when generating blacklist entries", func() {
			It("should handle empty entries list", func() {
				entries := []multipathv1.BlacklistEntry{}
				config := reconciler.generateBlacklistConfig(entries, "blacklist")
				Expect(config).To(BeEmpty())
			})

			It("should generate correct structure for devnode entries", func() {
				entries := []multipathv1.BlacklistEntry{
					{Devnode: "^sda"},
					{Devnode: "^sdb"},
				}
				config := reconciler.generateBlacklistConfig(entries, "blacklist")

				Expect(config).To(ContainSubstring("blacklist {"))
				Expect(config).To(ContainSubstring("devnode ^sda"))
				Expect(config).To(ContainSubstring("devnode ^sdb"))
				Expect(config).To(ContainSubstring("}"))
			})

			It("should generate correct structure for WWID entries", func() {
				entries := []multipathv1.BlacklistEntry{
					{WWID: "36001405abcdef1234567890"},
				}
				config := reconciler.generateBlacklistConfig(entries, "blacklist")

				Expect(config).To(ContainSubstring("blacklist {"))
				Expect(config).To(ContainSubstring("wwid 36001405abcdef1234567890"))
				Expect(config).To(ContainSubstring("}"))
			})

			It("should generate correct structure for device entries", func() {
				entries := []multipathv1.BlacklistEntry{
					{
						Device: multipathv1.DeviceIdentifier{
							Vendor:  "TestVendor",
							Product: "TestProduct",
						},
					},
				}
				config := reconciler.generateBlacklistConfig(entries, "blacklist")

				Expect(config).To(ContainSubstring("blacklist {"))
				Expect(config).To(ContainSubstring("device {"))
				Expect(config).To(ContainSubstring("vendor TestVendor"))
				Expect(config).To(ContainSubstring("product TestProduct"))
				Expect(config).To(ContainSubstring("}"))
			})
		})
	})

	Describe("generateBlacklistExceptionConfig", func() {
		Context("when generating blacklist exception entries", func() {
			It("should handle empty entries list", func() {
				entries := []multipathv1.BlacklistException{}
				config := reconciler.generateBlacklistExceptionConfig(entries, "blacklist_exceptions")
				Expect(config).To(BeEmpty())
			})

			It("should generate correct structure", func() {
				entries := []multipathv1.BlacklistException{
					{Devnode: "/dev/sda"},
					{
						Device: multipathv1.DeviceIdentifier{
							Vendor:  "NetApp",
							Product: "LUN.*",
						},
					},
				}
				config := reconciler.generateBlacklistExceptionConfig(entries, "blacklist_exceptions")

				Expect(config).To(ContainSubstring("blacklist_exceptions {"))
				Expect(config).To(ContainSubstring("devnode /dev/sda"))
				Expect(config).To(ContainSubstring("device {"))
				Expect(config).To(ContainSubstring("vendor NetApp"))
				Expect(config).To(ContainSubstring("product LUN.*"))
				Expect(config).To(ContainSubstring("}"))
			})
		})
	})
})
